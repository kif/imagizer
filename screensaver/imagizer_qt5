#!/usr/bin/python
# coding: utf-8

# Screensaver for imagizer

from __future__ import division, print_function, with_statement
__author__ = "Jérôme Kieffer"
__date__ = "06/01/2016"
__copyright__ = "Jerome Kieffer"
__license__ = "GPLv3+"
__contact__ = "Jerome.Kieffer@terre-adelie.org"

import sys
import os
import gc
import logging
import random
import uuid
from argparse               import ArgumentParser
logging.basicConfig(level=logging.INFO , filename="/tmp/imagizer_screensaver_%s.log" % uuid.uuid1())
logger = logging.getLogger("imagizer.screensaver")
import numpy
from imagizer import qt
from imagizer.qt            import flush
from imagizer.photo         import Photo
from imagizer.config        import config
from imagizer.imagizer import range_tout
from PyQt5 import QtX11Extras

class FullScreenWidget(qt.QWidget):

    def __init__(self, parent=None):
        super(FullScreenWidget, self).__init__(parent=parent)
#        if wid is not None:
#            self.embedInto(wid)
        self.setWindowState(qt.Qt.WindowFullScreen | qt.Qt.WindowActive)
        self.setSizePolicy(qt.QSizePolicy.Maximum, qt.QSizePolicy.Maximum)
        pal = qt.QPalette()
        pal.setColor(qt.QPalette.Window, qt.Qt.black);
        self.image = qt.QLabel(self)
        self.image.setSizePolicy(qt.QSizePolicy.Maximum, qt.QSizePolicy.Maximum)
        self.image.setAlignment(qt.Qt.AlignHCenter | qt.Qt.AlignVCenter)
        self.setAutoFillBackground(True)
        self.setPalette(pal)
        self.layout = qt.QVBoxLayout(self)
        self.layout.setContentsMargins(0, 0, 0, 0)
        self.layout.setAlignment(qt.Qt.AlignHCenter | qt.Qt.AlignVCenter)
        self.layout.addWidget(self.image)
        self.setLayout(self.layout)

    def keyPressEvent(self, e):
            self.close()

    def make_fullscreen(self):
        """
        Put an empty rectangle for a couple of seconds to actually record
        the size of the screen
        """
        pix = qt.QPixmap (1920, 1080)
        self.image.setPixmap(pix)
        app.processEvents()
        desktop = app.desktop()
        screen = desktop.screenNumber(self)
        rec = desktop.screenGeometry(screen)
        width, height = rec.width(), rec.height()
        rec2 = qt.QRect(0, 0, width, height)
        self.setGeometry(rec2)
        self.image.setGeometry(rec2)
        print(width, height)
        app.processEvents()


class ScreeenSaver(object):

    def __init__(self):
        self.window = None
        self.photo = None
        self.args = None
        self.current = None
        self.all_jpg = []
        self.random_list = []
        self.filename = os.path.join(os.environ.get("HOME"), ".screensaver.imagizer")
        self.timer = None
        self.desktop = app.desktop()
        self.wid = None
        self.parent = None

    def init_window(self):
        """initialize the window, if needed"""
        if self.window:
            return
        for i in os.environ:
            if "XSCREENSAVER" in i:
                logger.debug("%s: %s" % (i, os.environ[i]))
        if self.args.window_id:
            try:
                self.wid = int(self.args.window_id)
            except ValueError:
                self.wid = int(self.args.window_id, 16)
        elif "XSCREENSAVER_WINDOW" in os.environ:
            try:
                self.wid = int(os.environ["XSCREENSAVER_WINDOW"])
            except ValueError:
                self.wid = int(os.environ["XSCREENSAVER_WINDOW"], 16)

        logger.debug("Working on wid %s screen %s/%s" % (self.wid, self.desktop.screenNumber(self.window), self.desktop.screenCount()))
        if self.wid:
            self.parent = qt.QWidget.find(self.wid)
            if self.parent:
                self.parent.show()
                logger.debug("Parent place: %sx%s size: %sx%s",self.parent.x(), self.parent.y(), self.parent.height(), self.parent.width(), self.parent.height())
            else:
                logger.debug("parent: %s wid: %s", self.parent, self.wid)
            #ascii_wid = numpy.array([self.wid], int).tostring()
            #ascii_wid = hex(self.wid).encode("ascii")
            #logger.debug("code: %s",ascii_wid)
            #QtX11Extras.QX11Info.setNextStartupId(ascii_wid)
            #self.win.show()
        self.window = FullScreenWidget(parent=self.parent)
        self.window.show()
#        self.window.make_fullscreen()
        flush()

    @staticmethod
    def scan():
        """
        Scan the repository for all valid files
        """
        all_jpg = range_tout(repository=config.DefaultRepository, bUseX=False, fast=True, updated=None, finished=None)[0]

        logger.debug("Scanned directory %s and found %i images: %s", config.DefaultRepository, len(all_jpg), all_jpg[-5:])
        return all_jpg

    def parse(self):
        """
        Parse command line argument: old style single "-"
        """

        parser = ArgumentParser(description='Imagizer screen-saver')
        parser.add_argument('-display', dest='display', help='host:display.screen')
        parser.add_argument('-window', dest='window', help="Draw on a newly-created window.  This is the default.", action="store_true", default=False)
        parser.add_argument('-root', dest='root', action="store_true", default=False, help="Draw on the root window.")
        parser.add_argument('-delay', dest="delay", default=20, type=int, help="Per-frame  delay,  in  seconds.  Default: 20 seconds.")
        parser.add_argument("-window-id", dest="window_id", help="Identifier of the window to display.")
        parser.add_argument("-landscape", dest="landscape", action="store_true", default=False, help="Restrict slideshow to landscape images")
        parser.add_argument("-verbose", dest="debug", action="store_true", default=False, help="print debugging informations")
        self.args = parser.parse_args()
        if self.args.debug:
            logging.root.setLevel(logging.DEBUG)
            logger.setLevel(logging.DEBUG)
        logger.debug("args: %s" % self.args)

    def show(self):
        """Show the image in the given GtkImage widget and set up the exif tags in the GUI"""
        if not self.current:
            return
        if self.photo is None:
            self.photo = Photo(self.current, True)
        if self.wid:
            screen_geometry = self.desktop.screenGeometry(self.window)
            width, height = screen_geometry.width(), screen_geometry.height()
        else:
            width, height = self.window.width(), self.window.height()
        logger.debug("Showing image %s in size %sx%s on screen %s/%s" % (self.current, width, height, self.desktop.screenNumber(self.window), self.desktop.screenCount()))

        pixbuf = self.photo.get_pixbuf(width, height)
        self.window.image.setPixmap(pixbuf)
        del pixbuf
        gc.collect()
        flush()
        logger.debug("image widget has size %sx%s", self.window.image.width(), self.window.image.height())

    def next(self):
        """
        Finds the next image to display
        """
        if not self.all_jpg:
            self.all_jpg = self.scan()
        found = False
        while not found:
            if not self.random_list:
                self.random_list = range(len(self.all_jpg))
                random.shuffle(self.random_list)
            index = self.random_list.pop()
            self.photo = Photo(self.all_jpg[index], True)
            data = self.photo.readExif()
            rate = data.get("rate", 0)
            # 0 for x=5, 0.5 for x=3 and 0.99 for x=0
            treshold = -0.01733333 * rate * rate + -0.11133333 * rate + 0.99
            found = (random.random() >= treshold)
            if found and self.args.landscape:
                found = found and (self.photo.pixelsX > self.photo.pixelsY)
        return self.all_jpg[index]

    def __repr__(self):
        return "screensaver instance"

    def save(self):
        """
        saves the current image path for next restart
        """
        logger.debug("Saving filename")
        with open(self.filename, "w") as f:
            f.write(self.current)

    def load(self):
        """
        Load the last image from a file
        """
        if os.path.isfile(self.filename):
            current = open(self.filename, "r").read()
            current = current.strip()
            if current.startswith(os.sep):
                current2 = current
            else:
                current2 = os.path.join(config.DefaultRepository, current)
            if os.path.exists(current2):
                self.current = current

    def on_tick(self):
        """
        Skip to another picture.

        """
        self.current = self.next()
        self.save()
        self.show()

    def start(self):
        """
        Actually start the slideshow
        """
        if not self.args:
            self.parse()
        if not self.timer:
            if self.args.debug:
                delay = int(self.args.delay * 100)
            else:
                delay = int(self.args.delay * 1000)
            self.timer = qt.QTimer(self.window)
            self.timer.setInterval(delay)
            self.timer.timeout.connect(self.on_tick)
            self.timer.start(delay)
        else:
            logger.warning("timer already started")


if __name__ == "__main__":
    app = qt.QApplication([])
    scs = ScreeenSaver()
    scs.parse()
    scs.load()
    scs.init_window()
    scs.show()
    scs.start()
    res = app.exec_()
    sys.exit(0)

#!/usr/bin/env python
# coding: utf-8
#
#******************************************************************************\
# *
# * Copyright (C) 2006-2014,  Jérôme Kieffer <kieffer@terre-adelie.org>
# * Conception : Jérôme KIEFFER, Mickael Profeta & Isabelle Letard
# * Licence GPL v2
# *
# * This program is free software; you can redistribute it and/or modify
# * it under the terms of the GNU General Public License as published by
# * the Free Software Foundation; either version 2 of the License, or
# * (at your option) any later version.
# *
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# *
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
# *
#*****************************************************************************/
#
#
from __future__ import with_statement, division, print_function, absolute_import

"""
Selector is the graphical (GUI) interface part of the Imagizer project.
"""
__author__ = "Jérôme Kieffer"
__contact__ = "imagizer@terre-adelie.org"
__date__ = "29/11/2014"
__license__ = "GPL"

import os, locale, random, gc, time, shutil, sys, logging, glob
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("imagizer.selector")
import os.path as op

import imagizer
from imagizer.config        import config
from imagizer.dirchooser    import WarningSc
from imagizer.selection     import Selected
from imagizer.argparse      import ArgumentParser

try:
    from rfoo.utils import rconsole
    rconsole.spawn_server()
except ImportError:
    logger.debug("No socket opened for debugging -> please install rfoo")
#for debugging using rfoo
ifc = object()

if os.getenv("LANGUAGE"):
    try:
        locale.setlocale(locale.LC_ALL, os.getenv("LANGUAGE"))
    except:
        locale.setlocale(locale.LC_ALL, config.Locale)
else:
    locale.setlocale(locale.LC_ALL, config.Locale)


################################################################################
# Main program of selector
################################################################################

if __name__ == '__main__':
    printWarning = True

    parser = ArgumentParser(prog="selector",
                            description="Selector classe toutes les photos du répertoire donné",
                            epilog="Attention selector renomme tous les fichiers")
    parser.add_argument("-d", "--debug", help="mode debug tres verbeux", action="store_true", default=False)
    parser.add_argument("--nowarning", help="desactive l'avertissement", action="store_true", default=False)
    parser.add_argument("--noautorotate", help="ne pas tourner automatiquement les images", action="store_true", default=False)
    parser.add_argument("-f", "--fast", help="Démarrage rapide", action="store_true", default=False)
    parser.add_argument("path", help="repertoire a traiter", nargs='?')
    args = parser.parse_args()
    if args.debug:
        logger.setLevel(logging.DEBUG)
        logger.debug("We are in debug mode ...First Debug message")
    if args.noautorotate:
        config.AutoRotate = False
        logger.debug("Autorotate is disabled")
    if args.nowarning:
        logger.debug("Initial warning about file renaming is disabled")
        printWarning = False
    if args.path and  op.isdir(args.path):
        logger.debug("Working on directory %s" % args.path)
        config.DefaultRepository = op.abspath(args.path)

    config.printConfig()
    selected_fn = op.join(config.DefaultRepository, config.Selected_save)
    if (printWarning == True) and (not op.isfile(selected_fn)):
        W = WarningSc(config.DefaultRepository)
        config.DefaultRepository = W.directory
        del W
        selected_fn = op.join(config.DefaultRepository, config.Selected_save)


    if not op.isfile(selected_fn):
#        os.remove(selected_fn)
        try:
            f = open(selected_fn, "w")
            f.close()
        except Exception as error:
            logger.info("Unable to create seleted file %s: %s" % (selected_fn, error))

    if args.fast:
        l = len(config.DefaultRepository)
        if not config.DefaultRepository.endswith(os.sep):
            l += 1
        all_files = [i[l:] for i in glob.glob(os.path.join(config.DefaultRepository, "????-??-??*/*.jpg"))]
        all_files.sort()
        first = len(all_files) - 1
    else:
        all_files, first = rangeTout(config.DefaultRepository)

    values = (all_files, first, Selected.load(), config.GraphicMode)
    while config.GraphicMode != "Quit":
        if config.GraphicMode == "Normal":
            ifc = Interface(*values)
            gtk.main()
            values = (ifc.AllJpegs, ifc.iCurrentImg, ifc.selected, config.GraphicMode)
            del ifc
            gc.collect()
        elif config.GraphicMode in ["FullScreen", "SlideShow"]:
            ifc = FullScreenInterface(*values)
            gtk.main()
            values = (ifc.AllJpegs, ifc.iCurrentImg, ifc.selected, config.GraphicMode)
            del ifc
            gc.collect()
        if config.DEBUG:
            print("Switching to mode %s" % config.GraphicMode)

